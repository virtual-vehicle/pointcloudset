// For format details, see https://aka.ms/vscode-remote/devcontainer.json or this file's README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.122.1/containers/docker-existing-dockerfile
{
	"name": "pointcloudset_dev",
	// Sets the run context to one level up instead of the .devcontainer folder.
	"context": "..",
	// Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.
	"dockerFile": "dev.Dockerfile",
	// Set *default* container specific settings.json values on container create.
	"settings": {
		"python.formatting.provider": "black",
		"python.formatting.blackPath": "/opt/conda/envs/pointcloudset/bin/black",
		"editor.formatOnSave": true,
		"[latex]": {
			"editor.wordWrap": "on",
			"editor.formatOnSave": false,
		},
		"python.linting.mypyEnabled": true,
		"python.linting.enabled": true,
		"python.linting.flake8Enabled": true,
		"python.linting.flake8Args": [
			"--max-line-length=88"
		],
		"python.linting.pylintEnabled": true,
		"autoDocstring.docstringFormat": "google",
		"python.linting.pylintPath": "/opt/conda/envs/pointcloudset/bin/pylint",
		"cSpell.maxNumberOfProblems": 500,
		"python.testing.pytestEnabled": true,
		"jupyter.alwaysTrustNotebooks": true,
		"python.terminal.activateEnvironment": false,
		"python.linting.mypyPath": "/opt/conda/envs/pointcloudset/bin/mypy",
		"python.testing.pytestPath": "/opt/conda/envs/pointcloudset/bin/pytest",
		"python.linting.flake8Path": "/opt/conda/envs/pointcloudset/bin/flake8"
	},
	"postCreateCommand": "/opt/conda/envs/pointcloudset/bin/pip install -e .",
	"extensions": [
		"ms-python.python",
		"ms-python.vscode-pylance",
		"njpwerner.autodocstring",
		"ms-azuretools.vscode-docker",
		"mhutchie.git-graph",
		"eamodio.gitlens",
		"tomoki1207.pdf",
		"ms-azuretools.vscode-docker",
		"streetsidesoftware.code-spell-checker",
		"oderwat.indent-rainbow",
		"gua.rainbow-brackets",
		"littlefoxteam.vscode-python-test-adapter"
	],
	"forwardPorts": [
		5920,
		5900,
		8080,
		8787
	],
	"mounts": [
		"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind"
	]
}